/*
# Copyright (c) 2014, NVIDIA CORPORATION. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#  * Neither the name of NVIDIA CORPORATION nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#ifndef __NVX_SFM_POLYFIT_HPP__
#define __NVX_SFM_POLYFIT_HPP__

#include <vector>
#include "matrix.hpp"
#include "givensQR.hpp"

namespace mathalgo
{
/*
        Finds the coefficients of a polynomial p(x) of degree n that fits the data,
        p(x(i)) to y(i), in a least squares sense. The result p is a row vector of
        length n+1 containing the polynomial coefficients in incremental powers.

        param:
            oX                          x axis values
            oY                          y axis values
            nDegree                     polynomial degree including the constant

        return:
            coefficients of a polynomial starting at the constant coefficient and
            ending with the coefficient of power to nDegree. C++0x-compatible
            compilers make returning locally created vectors very efficient.

    */
template<typename T>
std::vector<T> polyfit( const std::vector<T>& oX, const std::vector<T>& oY, int nDegree )
{
    if ( oX.size() != oY.size() )
        throw std::invalid_argument( "X and Y vector sizes do not match" );

    // more intuative this way
    nDegree++;

    unsigned int nCount = static_cast<unsigned int>(oX.size());
    matrix<T> oXMatrix( nCount, nDegree );
    matrix<T> oYMatrix( nCount, 1 );

    // copy y matrix
    for ( unsigned int i = 0; i < nCount; i++ )
    {
        oYMatrix(i, 0) = oY[i];
    }

    // create the X matrix
    for ( unsigned int nRow = 0; nRow < nCount; nRow++ )
    {
        T nVal = 1.0f;
        for ( int nCol = 0; nCol < nDegree; nCol++ )
        {
            oXMatrix(nRow, nCol) = nVal;
            nVal *= oX[nRow];
        }
    }

    // transpose X matrix
    matrix<T> oXtMatrix( oXMatrix.transpose() );
    // multiply transposed X matrix with X matrix
    matrix<T> oXtXMatrix( oXtMatrix * oXMatrix );
    // multiply transposed X matrix with Y matrix
    matrix<T> oXtYMatrix( oXtMatrix * oYMatrix );

    Givens<T> oGivens;
    oGivens.Decompose( oXtXMatrix );
    matrix<T> oCoeff = oGivens.Solve( oXtYMatrix );
    // copy the result to coeff
    return oCoeff.data();
}

/*
        Calculates the value of a polynomial of degree n evaluated at x. The input
        argument pCoeff is a vector of length n+1 whose elements are the coefficients
        in incremental powers of the polynomial to be evaluated.

        param:
            oCoeff                      polynomial coefficients generated by polyfit() function
            oX                          x axis values

        return:
            Fitted Y values. C++0x-compatible compilers make returning locally
            created vectors very efficient.
    */
template<typename T>
std::vector<T> polyval( const std::vector<T>& oCoeff, const std::vector<T>& oX )
{
    size_t nCount  = oX.size();
    size_t nDegree = oCoeff.size();
    std::vector<T>   oY( nCount );

    for ( size_t i = 0; i < nCount; i++ )
    {
        T nY = 0;
        T nXT = 1;
        T nX = oX[i];
        for ( size_t j = 0; j < nDegree; j++ )
        {
            // multiply current x by a coefficient
            nY += oCoeff[j] * nXT;
            // power up the X
            nXT *= nX;
        }
        oY[i] = nY;
    }

    return oY;
}

}

#endif
